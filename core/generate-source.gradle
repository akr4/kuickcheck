import groovy.text.SimpleTemplateEngine

task funGenerator {
    def dest = file('src/main/generated/org/mikeneck/kuickcheck/generator/function/FunctionUtil.kt')
    outputs.file(dest)
    outputs.upToDateWhen {
        dest.exists()
    }
    def dir = dest.parentFile
    def engine = {
        new SimpleTemplateEngine()
    }
    doLast {
        def range = 0..22

        def val = range.collect {
            "${it % 4 == 0 ? '\n            ' : ''}Function${it}::class.java"
        }.join(', ')

        def funInfo = range.collect {
            it == 0 ? [idx: it, param: []] :
                    [param: new IntRange(1, it).collect { "P$it" }, idx: it]
        }.collect {
            def type = it.param.join(', ')
            def v = it.param.collect { "in $it" }.join(', ')
            def zero = type.isEmpty()
            def param = "<${type}${zero ? '' : ', '}R>"
            def vp = "<${v}${zero ? '' : ', '}out R>"
            [idx: it.idx, type: type, param: param, var: vp]
        }

        def funTemplate = parent.file('template/function.txt')
        def fun = funInfo.collect {
            engine().createTemplate(funTemplate).make(it).toString()
        }.join('\n')

        def classTemplate = parent.file('template/generator.txt')
        def classes = funInfo.collect {
            engine().createTemplate(classTemplate).make(it).toString()
        }.join('\n')

        def map = [val: "    val functions = listOf($val)", fun: fun, classes: classes]

        def ktTemplate = parent.file('template/head.txt')
        def kt = engine().createTemplate(ktTemplate).make(map).toString()

        if (!dir.exists()) {
            dir.mkdirs()
        }
        dest.write(kt, 'UTF-8')
    }
}

